PASSAR ISSO PARA O CHECKLIST MD. (REVISANDO)

Documento para estruturar e organizar próximos passos
-----------------------------------------------------
Lembrete para futuro: toda lógica deverá constar no back-end obrigatoriamente.
-----------------------------------------------------

Página http://localhost:3000/assessment

FRONT-END

- Se na Questão 12 a resposta não for "não", adicionar restrição da submissão do formulário enquanto não for preenchido o textarea "*Em que situações demonstra irritações?"

- Se na Questão 27 ou(operador lógico) 28 a resposta não for "não", adicionar restrição da submissão do formulário enquanto não for preenchido o textarea "** Caso o aluno faça uso de medicação. Observações:"

- Restringir o envio se não for selecionada se é a 1a ou 2a avaliação.

- Restringir o envio se não for selecionada a data da avaliação.

- Restringir o envio se a 47 não for preenchida.

- (opcional/talvez) A data da avaliação poderá ser pré-preenchida com a data atual.

- Colocar validador de datas (para que não se coloque sem querer datas erradas como ano 2250 ou 1900, por exemplo.)

BACK-END

- Resgatar nome do backend (BD).
- Ao submeter o formulário, devem ser enviados para persistência:
    - Nome do usuário.
    - Data de/da entrada.
    - Se 1a ou 2a avaliação.
    - Os valores (e talvez as chaves) das respostas 1 a 46.
    - O valor da resposta 47 (e talvez a chave dela)
    - Os valor do campos * e **. Esses talvez possam ser obrigatórios no banco, contudo aceitarão vazio, mas somente se a regra (que também deverá estar no backend) de serem as perguntas com os asteriscos forem de valor igual a 'não'. Ou seja, pergunta = 'não', permite salvar como "". Do contrário, deve ter algum preenchimento.
    - Data da avaliação.
    - O avaliador (a princípio, será registrado a partir do usuário logado.)
    

-----------------------------------------------------
http://localhost:3000/control

FRONT-END

- Em "Avaliação", colocar "Avaliação 1".
- Criar um botão de "Limpar Filtros", que faz um reset.

BACK-END

- Deverá vir do backend:
    - Nome;
    - Ingresso;
    - Avaliação 1;
    - Avaliação 2;
    - Entrevista pais 1;
    - Entrevista pais 2;
    - Resultado.

-----------------------------------------------------

http://localhost:3000/follow-up

FRONT-END

- O "placeholder" "Selecione..." deve ser algo como "Selecione um aluno(a)...".

BACK-END

- Deve vir do back-end:
    - Lista de Nomes.
    Após selecionar o nome, deve vir também:
    - Data de admissão;
    - Empresa;
    - Responsável RH;

- Deve ser submetido ao back-end,
    - Data da visita;
    - Contato com:;
    - Parecer geral.

-----------------------------------------------------

http://localhost:3000/employment-placement

NOTA: Verificar acerca da necessidade ter uma rota como employment-placement-list para listar, na horizontal, enquanto esta ficaria para cadastro. Importante lembrar que muitos dos dados já estariam no banco pois cadastrados em outras telas.

FRONT-END

BACK-END

-----------------------------------------------------

rota http://localhost:3000/employment-placement-list (Esta rota não está acessível diretamente vira menu lateral. Deve ser adicionada.)

FRONT-END

- Datas devem ser apresentadas em formato DD/MM/YYYY.
- Criar um botão de "Limpar Filtros", que faz um reset.

BACK-END

- Deve ir ao back-end quando clicar em Filtrar:
    - String para busca de nome;
    - Dado relativo a se é Data de Admissão ou de Data Desligamento;
    - Data inicial para busca;
    - Data final para busca.

- Devem vir do back-end:
    - Nome;
    - Data Admissão;
    - Empresa;
    - Função;
    - Contato RH;
    - Data Provável Desligamento;

-----------------------------------------------------

rota http://localhost:3000/students

FRONT-END

BACK-END

-----------------------------------------------------

rota http://localhost:3000/students (Esta rota não está acessível diretamente vira menu lateral. Acredito que deva ser adicionada ou deve ser modificado o UI para não mostrar o Cadastro no primeiro clique, mas sim o botão de listar e o e cadastrar, para o usuário escolher qual.)

FRONT-END

BACK-END

- Deve ser enviado ao back-end:
    - Nome;
    - Data de Nascimento;
    - Observação (como opcional);
    - Observação detalhada (como opcional).
    - Status do cadastro, já como Ativo;
    - Data de entrada do aluno na instituição (pode ser importante);
    - Deverá ter um espaço no BD para receber a Data de saída do aluno da instituição (será não preenchido de início - ainda a decidir se null ou outro valor).
-----------------------------------------------------

rota http://localhost:3000/students-list

FRONT-END

- Deve ser criado um filtro de busca por nome.
- Ao clicar em detalhes, deve mostrar também a Data de entrada do aluno na instituição.
- Ao clicar em detalhes, deve mostrar também status de Ativo ou Inativo.
- Ao clicar em detalhes, deve mostrar Data de saída do aluno da instituição (que poderá permancer em branco).

Obs: é possível que seja necessário poderes especiais para realizar, editar ou desfazer alterações no cadastro.

Obs2: Questiono acerca da necessidade de mostrar detalhes para baixo ao clicar no nome. Ou usa-se o ícone ou informações para baixo. Acredito que o ícone permita melhor UX.

BACK-END

Deverá ser enviado ao back-end:
    - String de filtro de busca por nome.

    - Ao clicar em 'Salvar' dentro de detalhes, podem ser enviados (via patch - ou seja, somente os alterados) os editáveis:
        - Nome;
        - Data nascimento;
        - Observação;
        - Observação detalhada;
        - Status do cadastro;
        - Data de entrada do aluno na instituição;
        - Data de saída do aluno da instituição.

- Deverá vir do back-end:
    - Lista com os nomes dos alunos.

    - (além do nome);
    - Data nascimento;
    - Observação;
    - Observação detalhada;
    - Status do cadastro;
    - Data de entrada do aluno na instituição;
    - Data de saída do aluno da instituição.

-----------------------------------------------------

rota http://localhost:3000/companies

FRONT-END

- Adicionar um botão que liste as empresas cadastradas.

BACK-END

-Deverá ser enviado ao back-end:
    - String de filtro de busca por nome.

    - Ao clicar em 'Salvar' dentro de detalhes, podem ser enviados (via patch - ou seja, somente os alterados) os editáveis:
        - Nome;
        - CNPJ;
        - Rua;
        - Número;
        - Bairro;
        - UF;
        - CEP;

- Deverá ir ao back-end:
    - Nome;
    - CNPJ;
    - Rua;
    - Número;
    - Bairro;
    - UF;
    - CEP;


-----------------------------------------------------

rota http://localhost:3000/companies-list (CRIAR, mostrará as empresas cadastradas e permitirá edições)

FRONT-END

- Deve ser criada a apresentação da lista de empresas por nome;
- Deve ser criado um filtro de busca por nome;
- Deve ser criado um botão de detalhes como no de Estudantes;
- Dentro do botão de detalhes, deverá ter a apresentação dos dados:
    - Nome;
    - CNPJ;
    - Rua;
    - Número;
    - Bairro;
    - UF;
    - CEP;
- Todos os dados em detalhes devem ser passíveis de edição.

BACK-END

- Deverá vir do back-end:
    - Lista de empresas cadastradas.

    - Nome;
    - CNPJ;
    - Rua;
    - Número;
    - Bairro;
    - UF;
    - CEP;

-----------------------------------------------------

rota http://localhost:3000/users

FRONT-END

- (para depois) revisar a UI quando se clica em Cadastrar.

BACK-END

-----------------------------------------------------

rota http://localhost:3000/user-list (deve ser criada para listar os admin cadastrados)

Obs: Deverá ser elaborado o que cada tipo de User tem autoridade para fazer dentro do sistema. Para isso, provavelmente, será necessário mais uma página para gerenciar isso.

FRONT-END

BACK-END

-----------------------------------------------------

rota http://localhost:3000/administration

FRONT-END

BACK-END

-----------------------------------------------------

rota http://localhost:3000/settings

FRONT-END

BACK-END

-----------------------------------------------------

rota http://localhost:3000/students (Esta rota não está acessível diretamente vira menu lateral. Acredito que deva ser adicionada ou deve ser modificado o UI para não mostrar o Cadastro no primeiro clique, mas sim o botão de listar e o e cadastrar, para o usuário escolher qual.)

FRONT-END

BACK-END

- Deve ser enviado ao back-end:
    - Nome;
    - Data de Nascimento;
    - Observação (como opcional);
    - Observação detalhada (como opcional).
    - Status do cadastro, já como Ativo;
    - Data de entrada do aluno na instituição (pode ser importante);
    - Deverá ter um espaço no BD para receber a Data de saída do aluno da instituição (será não preenchido de início - ainda a decidir se null ou outro valor).
-----------------------------------------------------

rota http://localhost:3000/students-list

FRONT-END

- Deve ser criado um filtro de busca por nome.
- Ao clicar em detalhes, deve mostrar também a Data de entrada do aluno na instituição.
- Ao clicar em detalhes, deve mostrar também status de Ativo ou Inativo.
- Ao clicar em detalhes, deve mostrar Data de saída do aluno da instituição (que poderá permancer em branco).

Obs: é possível que seja necessário poderes especiais para realizar, editar ou desfazer alterações no cadastro.

Obs2: Questiono acerca da necessidade de mostrar detalhes para baixo ao clicar no nome. Ou usa-se o ícone ou informações para baixo. Acredito que o ícone permita melhor UX.

BACK-END

Deverá ser enviado ao back-end:
    - String de filtro de busca por nome.

    - Ao clicar em 'Salvar' dentro de detalhes, podem ser enviados (via patch - ou seja, somente os alterados) os editáveis:
        - Nome;
        - Data nascimento;
        - Observação;
        - Observação detalhada;
        - Status do cadastro;
        - Data de entrada do aluno na instituição;
        - Data de saída do aluno da instituição.

- Deverá vir do back-end:
    - Lista com os nomes dos alunos.

    - (além do nome);
    - Data nascimento;
    - Observação;
    - Observação detalhada;
    - Status do cadastro;
    - Data de entrada do aluno na instituição;
    - Data de saída do aluno da instituição.

-----------------------------------------------------

rota http://localhost:3000/companies

FRONT-END

- Adicionar um botão que liste as empresas cadastradas.

BACK-END

-Deverá ser enviado ao back-end:
    - String de filtro de busca por nome.

    - Ao clicar em 'Salvar' dentro de detalhes, podem ser enviados (via patch - ou seja, somente os alterados) os editáveis:
        - Nome;
        - CNPJ;
        - Rua;
        - Número;
        - Bairro;
        - UF;
        - CEP;

- Deverá ir ao back-end:
    - Nome;
    - CNPJ;
    - Rua;
    - Número;
    - Bairro;
    - UF;
    - CEP;


-----------------------------------------------------

rota http://localhost:3000/companies-list (CRIAR, mostrará as empresas cadastradas e permitirá edições)

FRONT-END

- Deve ser criada a apresentação da lista de empresas por nome;
- Deve ser criado um filtro de busca por nome;
- Deve ser criado um botão de detalhes como no de Estudantes;
- Dentro do botão de detalhes, deverá ter a apresentação dos dados:
    - Nome;
    - CNPJ;
    - Rua;
    - Número;
    - Bairro;
    - UF;
    - CEP;
- Todos os dados em detalhes devem ser passíveis de edição.

BACK-END

- Deverá vir do back-end:
    - Lista de empresas cadastradas.

    - Nome;
    - CNPJ;
    - Rua;
    - Número;
    - Bairro;
    - UF;
    - CEP;

-----------------------------------------------------

rota http://localhost:3000/users

Obs: Esta página já está presumindo que um admin de alto nível hierarquico está com acesso. Mas esse acesso veio de onde, foi fornecido por quem?

FRONT-END

- (para depois) revisar a UI quando se clica em Cadastrar. Está 

BACK-END

- Deverá ir ao back-end:
    - Username;
    - Senha; (validação também...)
    - Categoria;

- Deverá vir do backend:
    - Resposta com negativa se o username já existir. Ou mensagem de sucesso.

-----------------------------------------------------

rota http://localhost:3000/user-list (deve ser criada para listar os admin cadastrados. Quem terá acesso é algum tipo de admin master)

Obs: Deverá ser elaborado o que cada tipo de User tem autoridade para fazer dentro do sistema. Para isso, provavelmente, será necessário mais uma página para gerenciar isso.

FRONT-END
- Lista de user cadastrados.
- Botão de edição que abre uma janela para visualizar e editar as permissões e outros atributos.
- Na janela:
    - Edição de nome;
    - Edição de Categoria, nível hierárquico;
    - Botão de edição de senha.
        - Em edição de senha:
            - A senha antiga;
            - A senha nova;
            - A repetição da senha nova;
            - Um botão de Trocar Senha confirmando a alteração (isso deverá disparar eventos como e-mail, etc)

BACK-END

- Deverá vir do back-end:
    - Lista de users/admins.
    - Outros dados quando clicar para editar, como nível hierárquico.

    Obs: A senha não vem do backend. Ela só é verificada lá, mas nunca vem pro front (a menos que haja uma solicitação de envio da senha por e-mail - se essa feature for existir. Não há necessidade, pode-se trabalhar somente com troca de senha, por exemplo.)

- Deverá ir ao back-end (usando PATCH):
    - Nome cadastrado;
    - Categoria;
    - Senha antiga (para confirmar numa mudança);
    - Senha nova;
    - Senha nova (repetida, para confirmação, já que a lógica do front deve existir no back-end);
    - Eventuais outros dados.

-----------------------------------------------------

rota http://localhost:3000/administration

FRONT-END

BACK-END

-----------------------------------------------------

rota http://localhost:3000/settings

FRONT-END

BACK-END

-----------------------------------------------------
GERAL:
    - Toda página deve ter um botão de voltar que volte para a página que seria a hipoteticamente anterior àquela. Esse botão não deve fazer o mesmo que o botão voltar do navegador. Ele deverá permitir seja possível "voltar" a uma página que não foi acessada antes.

    - A menos que não seja um campo obrigatório, todos os inputs devem ter validação compatível, seja no momento do preenchimento ou do submit. Obs: Alguns campos podem vir a se tornar obrigatórios a depender do que foi preenchido no restante do formulário.

    - Revisão geral de Design UX/UI, principalmente em termos de consistência/padronização. O objetivo é reduzir a carga cognitiva necessária para usar a aplicação.